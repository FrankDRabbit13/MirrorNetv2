rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Circles: Members can read, only the owner can write/delete.
    match /circles/{circleId} {
      allow read: if request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Ratings: Can only be created/updated by the 'fromUserId'. Can be read by either user involved.
    match /ratings/{ratingId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow create, update: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
        allow delete: if false; // Ratings should not be deleted by users.
    }
    
    // Attraction Ratings (Premium): Similar to regular ratings.
    match /attractionRatings/{ratingId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow create, update: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
        allow delete: if false;
    }

    // Invites: Can be read by sender or receiver, created by sender, updated by receiver.
    match /invites/{inviteId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
      allow update: if request.auth != null && request.auth.uid == resource.data.toUserId;
      allow delete: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }
    
    // Reveal Requests (Premium): Handled similarly to invites.
    match /revealRequests/{requestId} {
        allow read, create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
        allow update: if request.auth != null && request.auth.uid == resource.data.toUserId;
        allow delete: if false;
    }
    
    // Family Goals (Premium)
    match /familyGoals/{goalId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId;
        allow update: if request.auth != null && request.auth.uid == resource.data.toUserId;
    }
    
    // Feedback: Can be created by any authenticated user, but not read by them.
    match /feedback/{feedbackId} {
        allow read: if false;
        allow create: if request.auth != null;
    }

    // Stripe-related collections are managed by the extension and should be locked down.
    match /products/{productId} {
      allow read: if true;
      allow write: if false;
    }
     match /products/{productId}/prices/{priceId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
