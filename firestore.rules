
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own document.
    // A user can be created if the document id matches the new user's id.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Circles can be read by anyone in the circle.
    // Circles can only be created or deleted by the owner.
    // Circles can only be updated (e.g. adding/removing members) by the owner.
    match /circles/{circleId} {
      allow read: if request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      allow create, delete: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Ratings can be created by any authenticated user.
    // Ratings can be read only by the sender or receiver.
    // Ratings can only be updated or deleted by the sender.
    match /ratings/{ratingId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }
    
    // Attraction ratings follow similar rules to standard ratings.
    match /attractionRatings/{ratingId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }

    // Invites can be created by any authenticated user.
    // Invites can be read by sender or receiver.
    // Invites can be updated/deleted by the receiver (to accept/decline).
    match /invites/{inviteId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.toUserId;
    }

    // Feedback can be created by any authenticated user.
    // For security, feedback is write-only for users. Admins would need separate rules or backend access.
    match /feedback/{feedbackId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false; // Only backend/admins can read
    }

    // Reveal requests can be created by authenticated users.
    // They can be read by sender/receiver, and updated by the receiver.
    match /revealRequests/{requestId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.toUserId;
    }

    // Family goals can be created by authenticated users.
    // They can be read by involved parties, and updated by either.
    match /familyGoals/{goalId} {
        allow create: if request.auth != null;
        allow read: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
        allow update, delete: if request.auth != null && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }
  }
}
