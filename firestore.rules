
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and update their own user document.
    // New users can be created by anyone (during signup).
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // A user can read a circle document if they are a member of that circle.
    // Users can create and update their own circles.
    match /circles/{circleId} {
      allow read: if request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      allow create, update: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
    }

    // Allow users to create ratings and read ratings they've received if they are premium.
    match /ratings/{ratingId} {
      allow create, update: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      // In a real-world scenario, you might have more complex read rules,
      // but for now, we'll keep it simple: you can't read others' individual ratings directly.
      allow read: if false; 
    }
    
    // Premium attraction ratings
    match /attractionRatings/{ratingId} {
      allow create, update: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow read: if request.auth != null && request.resource.data.toUserId == request.auth.uid;
    }

    // Invites
    match /invites/{inviteId} {
        allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
        allow read, update: if request.auth != null && (request.resource.data.fromUserId == request.auth.uid || request.resource.data.toUserId == request.auth.uid);
    }
    
    // Reveal Requests
    match /revealRequests/{requestId} {
       allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
       allow read, update: if request.auth != null && request.resource.data.toUserId == request.auth.uid;
    }

    // Family Goals
    match /familyGoals/{goalId} {
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow read, update: if request.auth != null && (request.resource.data.fromUserId == request.auth.uid || request.resource.data.toUserId == request.auth.uid);
    }

    // Feedback
    match /feedback/{feedbackId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Admin-only access for reading feedback would be a good addition here in a real app
      allow read: if false; 
    }
  }
}
